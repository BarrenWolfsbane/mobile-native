
buildscript {
    ext {
        buildToolsVersion = "28.0.3"
        minSdkVersion = 21
        compileSdkVersion = 28
        targetSdkVersion = 28
        supportLibVersion = "28.0.0"
        glideVersion = "4.7.1"
    }
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.0'
        classpath 'com.google.gms:google-services:4.3.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        mavenLocal()
        maven {
            // url "$rootDir/../../jitsi-maven-repository/releases" // used for local dev of jitsi sdk
            // url "https://github.com/jitsi/jitsi-maven-repository/raw/master/releases" // original
            url "https://gitlab.com/minds/jitsi-maven-repository/raw/master/releases" // ours custom sdk
        }
        google()
        jcenter()
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url "$rootDir/../node_modules/react-native/android"
        }

        maven { url "https://www.jitpack.io" }
    }
    configurations.all {
        resolutionStrategy.force "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    }
}


subprojects {
    // fix missing gradle versions in jcenter
    if (project.name.contains('react-native-fast-image')
        || project.name.contains('react-native-image-picker')
        || project.name.contains('react-native-vector-icons')
        ) {
        buildscript {
            repositories {
                maven { url = "https://dl.bintray.com/android/android-tools/" }
            }
        }
    }

    afterEvaluate {p ->
        if (p.hasProperty("android")) {
            android {
                compileSdkVersion rootProject.ext.compileSdkVersion
                buildToolsVersion rootProject.ext.supportLibVersion
            }
        }
    }

    configurations.all {
        // afterEvaluate {p ->
        //     if (p.hasProperty("android")) {
        //         android {
        //             compileSdkVersion rootProject.ext.compileSdkVersion
        //             buildToolsVersion rootProject.ext.supportLibVersion
        //         }
        //     }
        // }
        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.android.support'
                && !details.requested.name.contains('multidex') ) {
                details.useVersion rootProject.ext.supportLibVersion
            }
        }
    }
}